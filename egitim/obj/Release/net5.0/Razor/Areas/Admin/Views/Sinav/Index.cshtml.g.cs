#pragma checksum "C:\Users\ekind\OneDrive\Masaüstü\egitim\egitim\Areas\Admin\Views\Sinav\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "75bdf78bbb4803b8c7af5c4f5858fcced077b3c1"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_Admin_Views_Sinav_Index), @"mvc.1.0.view", @"/Areas/Admin/Views/Sinav/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\ekind\OneDrive\Masaüstü\egitim\egitim\Areas\Admin\Views\_ViewImports.cshtml"
using egitim.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"75bdf78bbb4803b8c7af5c4f5858fcced077b3c1", @"/Areas/Admin/Views/Sinav/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"7f1df80f115abe2bdae7b51ee44901c25b7f3532", @"/Areas/Admin/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Areas_Admin_Views_Sinav_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/admin/plugins/summernote/summernote-bs4.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "75bdf78bbb4803b8c7af5c4f5858fcced077b3c13726", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<div class=""row"">
    <div class=""col-md-6"">
        <div class=""card card-primary"">
            <div class=""card-header"">
                <h3 class=""card-title"">Sınav Ekle</h3>

                <div class=""card-tools"">
                    <button type=""button"" class=""btn btn-tool"" data-card-widget=""collapse"" title=""Collapse"">
                        <i class=""fas fa-minus""></i>
                    </button>
                </div>
            </div>
            <div class=""card-body"">
                <div class=""form-group"">
                    <label for=""inputName"">Sınav Ad</label>
                    <input type=""text"" id=""inputName"" class=""form-control"">
                </div>
                <div class=""form-group"">
                    <label for=""inputName"">Fiyat</label>
                    <input type=""text"" id=""fiyat"" class=""form-control"">
                </div>
                <div class=""form-group"">
                    <label for=""inputName"">Kaç Soruluk Sınav Olduğuunu Girin");
            WriteLiteral(@"iz (4-5)</label>
                    <input type=""text"" id=""soruSayisi"" class=""form-control"">
                </div>
                <div class=""form-group"">
                    <label for=""inputName"">Resim</label>
                    <input type=""file"" id=""resim"" class=""form-control"" onchange=""previewImage(event)"">
                    <img id=""resimPreview"" src=""#"" alt=""Resim Önizleme"" style=""max-width: 200px; margin-top: 10px; display: none;"">
                </div>
                <button id=""sinavKaydet"" class=""btn btn-outline-success"">Kaydet</button>
            </div>
            <!-- /.card-body -->
        </div>
        <div class=""card card-primary"">
            <div class=""card-header"">
                <h3 class=""card-title"">Ders Ekle</h3>

                <div class=""card-tools"">
                    <button type=""button"" class=""btn btn-tool"" data-card-widget=""collapse"" title=""Collapse"">
                        <i class=""fas fa-minus""></i>
                    </button>
         ");
            WriteLiteral(@"       </div>
            </div>
            <div class=""card-body"">
                <div class=""form-group"">
                    <label>Sinav Seçini</label>
                    <select id=""sinavsec"" class=""form-control"">
                    </select>
                </div>
                <div class=""form-group"">
                    <label for=""inputName"">Ders Adını Giriniz</label>
                    <input type=""text"" id=""dersad"" class=""form-control"">
                </div>
                <button id=""derskaydet"" class=""btn btn-outline-success"">Kaydet</button>
            </div>
            <!-- /.card-body -->
        </div>
        <div class=""card card-primary"">
            <div class=""card-header"">
                <h3 class=""card-title"">Konu Ekle</h3>

                <div class=""card-tools"">
                    <button type=""button"" class=""btn btn-tool"" data-card-widget=""collapse"" title=""Collapse"">
                        <i class=""fas fa-minus""></i>
                    </button");
            WriteLiteral(@">
                </div>
            </div>
            <div class=""card-body"">
                <div class=""form-group"">
                    <label>Sinav Seçini</label>
                    <select id=""sinav2"" class=""form-control"">
                    </select>
                </div>
                <div class=""form-group"">
                    <label>Ders Seçini</label>
                    <select id=""derssecimi"" class=""form-control"">
                    </select>
                </div>
                <div class=""form-group"">
                    <label for=""inputName"">Konu Adını Giriniz</label>
                    <input type=""text"" id=""konuad"" class=""form-control"">
                </div>
                <button id=""konuKaydet"" class=""btn btn-outline-success"">Kaydet</button>
            </div>
            <!-- /.card-body -->
        </div>
        <!-- /.card -->
    </div>
    <div class=""col-md-6"">
        <div class=""card card-secondary"">
            <div class=""card-header"">
  ");
            WriteLiteral(@"              <h3 class=""card-title"">Sınava Soru Ekle</h3>

                <div class=""card-tools"">
                    <button type=""button"" class=""btn btn-tool"" data-card-widget=""collapse"" title=""Collapse"">
                        <i class=""fas fa-minus""></i>
                    </button>
                    <button type=""button"" class=""btn btn-tool"" id=""yenile"" >
                        Yenile
                    </button>
                </div>
            </div>
            <div class=""card-body"">
                <div class=""form-group"">
                    <label class=""row"" for=""inputEstimatedBudget"">Sınav Seçin</label>
                    <br />
                    <div class=""form-group"">
                        <label>Sinav Seçini</label>
                        <select id=""sinavSecSoru"" class=""form-control"">
                        </select>
                    </div>
                    <div class=""form-group"">
                        <label>Ders Seçini</label>
             ");
            WriteLiteral(@"           <select id=""dersSecSoru"" class=""form-control"">
                        </select>
                    </div>
                    <div class=""form-group"">
                        <label>Konu Seçini</label>
                        <select id=""konuSecSoru"" class=""form-control"">
                        </select>
                    </div>
                    <div class=""form-group"" id=""sorus"">

                    </div>
                </div>
            </div>
            <!-- /.card-body -->
        </div>
        <!-- /.card -->
    </div>
</div>

<script src=""https://code.jquery.com/jquery-3.6.0.min.js""></script>

<script>
    $(document).ready(function () {
        $(""#sinavKaydet"").click(function () {
            var ad = $('#inputName').val();
            var fiyat = $('#fiyat').val();
            var soruSayisi = $('#soruSayisi').val();
            var resimDosyasi = $('#resim')[0].files[0];

            var formData = new FormData();
            formData.append('a");
            WriteLiteral(@"d', ad);
            formData.append('fiyat', fiyat);
            formData.append('soruSayisi', soruSayisi);
            formData.append('resimDosyasi', resimDosyasi);

            $.ajax({
                url: '/Admin/Sinav/sinavEkle',
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    // Başarılı bir şekilde tamamlandığında burası çalışır
                    console.log(response);
                },
                error: function (xhr, status, error) {
                    // Hata durumunda burası çalışır
                    console.error(error);
                }
            });
        });
    });

    function previewImage(event) {
        var reader = new FileReader();
        reader.onload = function () {
            var output = document.getElementById('resimPreview');
            output.src = reader.result;
            outp");
            WriteLiteral(@"ut.style.display = 'block';
        }
        reader.readAsDataURL(event.target.files[0]);
    }
</script>
<script>
    $(document).ready(function () {
        $.ajax({
            url: '/Admin/Sinav/getSinav',
            method: 'GET',
            success: function (response) {
                var options = '';
                $.each(response, function (index, item) {
                    options += '<option value=""' + item.id + '"">' + item.ad + '</option>';
                });
                $('#sinavlar').append(options);
            },
            error: function (xhr, status, error) {
                console.error(error);
            }
        });
    });
</script>
<script src=""https://code.jquery.com/jquery-3.6.0.min.js""></script>

<script>
    $(document).ready(function () {
        $('#sinavlar').change(function () {
            $('.artı-butonu').remove();
            var selectedSinavId = $(this).val();

            if (selectedSinavId) {
                $(this).after");
            WriteLiteral(@"('<button class=""btn btn-success artı-butonu"">+</button>');
            }
        });

        $(document).on('click', '.artı-butonu', function () {
            var soruHtml = `
                <div class=""form-group"">
                    <label for=""inputSoruMetni"">Soru Metni</label>
                    <textarea class=""form-control"" name=""soruMetni[]"" required></textarea>
                </div>
                <div class=""form-group"">
                    <label for=""inputBirinciSecenek"">Birinci Seçenek</label>
                    <input type=""text"" class=""form-control"" name=""birinciSecenek[]"" required>
                </div>
                <div class=""form-group"">
                    <label for=""inputIkinciSecenek"">İkinci Seçenek</label>
                    <input type=""text"" class=""form-control"" name=""ikinciSecenek[]"" required>
                </div>
                <div class=""form-group"">
                    <label for=""inputUcuncuSecenek"">Üçüncü Seçenek</label>
                    <");
            WriteLiteral(@"input type=""text"" class=""form-control"" name=""ucuncuSecenek[]"" required>
                </div>
                <div class=""form-group"">
                    <label for=""inputDorduncuSecenek"">Dördüncü Seçenek</label>
                    <input type=""text"" class=""form-control"" name=""dorduncuSecenek[]"" required>
                </div>
                <div class=""form-group"">
                    <label for=""inputDogruCevap"">Doğru Cevap</label>
                    <input type=""text"" class=""form-control"" name=""dogruCevap[]"" required>
                </div>
                <hr>
            `;
            $('.card-body').append(soruHtml);
        });
    });
    $(document).ready(function () {
        $.ajax({
            url: ""/Admin/Sinav/getSinav"", // Backend API URL
            type: ""GET"",
            dataType: ""json"",
            success: function (data) {
                var select = $(""#sinavsec""); // Select element
                $.each(data, function (index, item) {
                  ");
            WriteLiteral(@"  // Create an option element for each item in the data
                    var option = $(""<option>"").val(item.id).text(item.ad);
                    select.append(option); // Append the option to the select element
                });
            },
            error: function () {
                console.log(""Error occurred while fetching data."");
            }
        });
    });
    $(document).ready(function () {
        $.ajax({
            url: ""/Admin/Sinav/getSinav"", // Backend API URL
            type: ""GET"",
            dataType: ""json"",
            success: function (data) {
                var select = $(""#sinav2""); // Select element
                $.each(data, function (index, item) {
                    // Create an option element for each item in the data
                    var option = $(""<option>"").val(item.id).text(item.ad);
                    select.append(option); // Append the option to the select element
                });
            },
            error: fu");
            WriteLiteral(@"nction () {
                console.log(""Error occurred while fetching data."");
            }
        });
    });
    $(document).ready(function () {
        $.ajax({
            url: ""/Admin/Sinav/getSinav"", // Backend API URL
            type: ""GET"",
            dataType: ""json"",
            success: function (data) {
                var select = $(""#sinavSecSoru""); // Select element
                $.each(data, function (index, item) {
                    // Create an option element for each item in the data
                    var option = $(""<option>"").val(item.id).text(item.ad);
                    select.append(option); // Append the option to the select element
                });
            },
            error: function () {
                console.log(""Error occurred while fetching data."");
            }
        });
    });
    $(document).ready(function () {
        // Sinav seçimi değiştiğinde
        $(""#sinav2"").change(function () {
            var selectedSinavId = $");
            WriteLiteral(@"(this).val(); // Seçilen sinav ID'si

            // Ders seçimini sıfırla
            $(""#derssecimi"").empty();

            // Ajax isteği gönder
            $.ajax({
                url: ""/Admin/Sinav/getDers"",
                type: ""GET"",
                data: { egitimId: selectedSinavId },
                dataType: ""json"",
                success: function (data) {
                    var select = $(""#derssecimi""); // Ders seçim elementi
                    $.each(data, function (index, item) {
                        // Her bir veri öğesi için bir option öğesi oluştur
                        var option = $(""<option>"").val(item.id).text(item.ad);
                        select.append(option); // Option'ı ders seçimine ekle
                    });
                },
                error: function () {
                    console.log(""Error occurred while fetching data."");
                }
            });
        });
    });
    $(document).ready(function () {
        $(""#derska");
            WriteLiteral(@"ydet"").click(function () {
            var sinavId = $(""#sinavsec"").val(); // Seçilen sinav ID'si
            var dersAd = $(""#dersad"").val(); // Girilen ders adı

            // Ajax isteği gönder
            $.ajax({
                url: ""/Admin/Sinav/dersKaydet"",
                type: ""POST"",
                data: { sinavId: sinavId, dersAd: dersAd },
                dataType: ""json"",
                success: function (response) {
                    // İsteğin başarılı olduğunu kontrol et
                    if (response === ""ok"") {
                        // Başarılı mesajını işle
                        alert(""Ders başarıyla kaydedildi."");

                        // İstenirse sayfayı yenileyebilir veya başka bir işlem yapabilirsiniz
                        // location.reload(); // Sayfayı yenilemek için
                    }
                },
                error: function () {
                    console.log(""Error occurred while saving the course."");
                }
       ");
            WriteLiteral(@"     });
        });
    });
    $(document).ready(function () {
        $(""#konuKaydet"").click(function () {
            var dersId = $(""#derssecimi"").val(); // Seçilen ders ID'si
            var konuAd = $(""#konuad"").val(); // Girilen konu adı

            // Ajax isteği gönder
            $.ajax({
                url: ""/Admin/Sinav/konuKaydet"",
                type: ""POST"",
                data: { dersId: dersId, konuAd: konuAd },
                dataType: ""json"",
                success: function (response) {
                    // İsteğin başarılı olduğunu kontrol et
                    if (response === ""ok"") {
                        // Başarılı mesajını işle
                        alert(""Konu başarıyla kaydedildi."");

                        // İstenirse sayfayı yenileyebilir veya başka bir işlem yapabilirsiniz
                        // location.reload(); // Sayfayı yenilemek için
                    }
                },
                error: function () {
                  ");
            WriteLiteral(@"  console.log(""Error occurred while saving the topic."");
                }
            });
        });
        $(""#yenile"").click(function () {
            $('#summernote').summernote()
            $('#summernote2').summernote()
        });
    });
    $(document).ready(function () {
        // Sinav seçimi değiştiğinde
        $(""#sinavSecSoru"").change(function () {
            var selectedSinavId = $(this).val(); // Seçilen sinav ID'si

            // Ders ve konu seçimini sıfırla
            $(""#dersSecSoru"").empty();
            $(""#konuSecSoru"").empty();

            // Ajax isteği gönder
            $.ajax({
                url: ""/Admin/Sinav/getDers"",
                type: ""GET"",
                data: { egitimId: selectedSinavId },
                dataType: ""json"",
                success: function (data) {
                    var select = $(""#dersSecSoru""); // Ders seçim elementi
                    $.each(data, function (index, item) {
                        // Her bir ver");
            WriteLiteral(@"i öğesi için bir option öğesi oluştur
                        var option = $(""<option>"").val(item.id).text(item.ad);
                        select.append(option); // Option'ı ders seçimine ekle
                    });

                    // Ders seçimi değiştiğinde
                    select.change(function () {
                        var selectedDersId = $(this).val(); // Seçilen ders ID'si
                        // Konu seçimini sıfırla
                        $(""#konuSecSoru"").empty();

                        // Ajax isteği gönder
                        $.ajax({
                            url: ""/Admin/Sinav/getKonu"",
                            type: ""GET"",
                            data: { dersId: selectedDersId },
                            dataType: ""json"",
                            success: function (data) {
                                var konuSelect = $(""#konuSecSoru""); // Konu seçim elementi
                                $.each(data, function (index, item) {
    ");
            WriteLiteral(@"                                // Her bir veri öğesi için bir option öğesi oluştur
                                    var option = $(""<option>"").val(item.id).text(item.ad);
                                    konuSelect.append(option); // Option'ı konu seçimine ekle
                                });
                            },
                            error: function () {
                                console.log(""Error occurred while fetching topics."");
                            }
                        });
                    });
                },
                error: function () {
                    console.log(""Error occurred while fetching courses."");
                }
            });
        });
    });
    $(document).ready(function () {
        // Konu seçimi değiştiğinde
        $(""#konuSecSoru"").change(function () {
            // Kontrol etmek için artı butonunun varlığını kontrol edin
            if ($(""#artıButton"").length === 0) {
                // Artı ");
            WriteLiteral(@"butonunu oluştur
                var addButton = $(""<button>"").attr(""id"", ""artıButton"").addClass(""btn btn-primary btn-sm ml-2"").text(""+"");

                // Artı butonuna tıklama olayı dinleyicisi ekle
                addButton.click(function () {
                    var sinavId = $(""#sinavSecSoru"").val();
                    var dersId = $(this).val();

                    // AJAX isteği yaparak soru sayısını al
                    $.ajax({
                        url: ""/Admin/Sinav/getSoruSayisi?sinavId="" + sinavId,
                        type: ""GET"",
                        success: function (soruSayisi) {
                            // Soru sayısına göre inputları oluştur
                            createInputFields(soruSayisi);
                        },
                        error: function (error) {
                            console.log(""Hata: "" + error);
                        }
                    });

                    // AJAX ile alınan soru sayısına göre inputları o");
            WriteLiteral(@"luşturan fonksiyon
                    function createInputFields(soruSayisi) {
                        var formGroup = $(""#sorus"");

                        // Mevcut inputları temizle
                        formGroup.find("".cevap-input"").remove();

                        // Dört veya beş cevap için inputları oluştur
                        for (var i = 1; i <= 1; i++) {
                            var soruDiv = $(""<div>"").addClass(""cevap-input"");
                            soruDiv.append($(""<label>"").text(""Soru Metni""));
                            soruDiv.append($(""<textarea>"").attr(""name"", ""soruMetni"" + i).addClass(""form-control summernote"").attr(""id"",""summernote""));

                            soruDiv.append($(""<label>"").text(""A""));
                            soruDiv.append($(""<input>"").attr(""type"", ""text"").attr(""name"", ""cevap"" + i + ""A"").addClass(""form-control""));

                            soruDiv.append($(""<label>"").text(""B""));
                            soruDiv.append($(""<inp");
            WriteLiteral(@"ut>"").attr(""type"", ""text"").attr(""name"", ""cevap"" + i + ""B"").addClass(""form-control""));

                            soruDiv.append($(""<label>"").text(""C""));
                            soruDiv.append($(""<input>"").attr(""type"", ""text"").attr(""name"", ""cevap"" + i + ""C"").addClass(""form-control""));

                            soruDiv.append($(""<label>"").text(""D""));
                            soruDiv.append($(""<input>"").attr(""type"", ""text"").attr(""name"", ""cevap"" + i + ""D"").addClass(""form-control""));

                            
                            // Beş cevap için ekstra alan
                            if (soruSayisi === 5) {
                                soruDiv.append($(""<label>"").text(""E""));
                                soruDiv.append($(""<input>"").attr(""type"", ""text"").attr(""name"", ""cevap"" + i + ""E"").addClass(""form-control""));
                            }
                            soruDiv.append($(""<label>"").text(""DoğruCevap (Şıkkın harfini giriniz örn : A )""));
                    ");
            WriteLiteral(@"        soruDiv.append($(""<input>"").attr(""type"", ""text"").attr(""name"", ""dogrucevap"").addClass(""form-control""));
                            soruDiv.append($(""<label>"").text(""Cevap Çözümü Metni""));
                            soruDiv.append($(""<textarea>"").attr(""name"", ""soruMetni"" + i).addClass(""form-control summernote"").attr(""id"", ""summernote2""));
                            formGroup.append(soruDiv);
                        }
                    }
                    var soruKaydetButton = $(""<button>"").attr(""id"", ""soruKaydeButton"").addClass(""btn btn-primary"").text(""Soru Kaydet"");
                    $(""#sorus"").after(soruKaydetButton);
                });

                console.log(""Artı butonuna tıklandı."");

                // Artı butonunu konu seçimi alanının altına ekle
                $(""#konuSecSoru"").parent().append(addButton);
            }
        });
    });
    $(document).ready(function () {
        $(document).on(""click"", ""#soruKaydeButton"", function () {
            var ko");
            WriteLiteral(@"nuId = $(""#konuSecSoru"").val();
            var soruMetni = $(""#summernote"").summernote('code');
            var cozum = $(""#summernote2"").summernote('code');
            var cevapA = $(""input[name^='cevap1A']"").val();
            var cevapB = $(""input[name^='cevap1B']"").val();
            var cevapC = $(""input[name^='cevap1C']"").val();
            var cevapD = $(""input[name^='cevap1D']"").val();
            var cevapE = $(""input[name^='cevap1E']"").val();
            var dogruCevap = $(""input[name='dogrucevap']"").val();

            // Kontrol et, eğer şıklar ve doğru cevap girilmemişse değerleri ""cevapyok"" olarak ayarla
            if (!dogruCevap) {
                alert(""Doğru Şık keslinlikle girilmelidir"");
            }

            // AJAX isteği ile verileri gönder
            $.ajax({
                url: ""/Admin/Sinav/soruKaydet"", // İsteğin gideceği URL'yi buraya yazın
                type: ""POST"",
                data: {
                    konuId: konuId,
                    so");
            WriteLiteral(@"ru: soruMetni,
                    cevapA: cevapA,
                    cevapB: cevapB,
                    cevapC: cevapC,
                    cevapD: cevapD,
                    cevapE: cevapE,
                    dogruCevap: dogruCevap,
                    cozum: cozum
                },
                success: function (response) {
                    alert(""Başarıyla kaydedildi: "" + response);
                },
                error: function (error) {
                    console.log(""Hata: "" + error);
                },
            });
        });
    });
</script>
<script>
    $(function () {
        // Summernote
        $('#summernote').summernote()

        // CodeMirror
        CodeMirror.fromTextArea(document.getElementById(""codeMirrorDemo""), {
            mode: ""htmlmixed"",
            theme: ""monokai""
        });
    })
</script>");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
